buildscript {
    dependencies {
        classpath 'io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE'
        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7.1'
    }
}
plugins {
    id 'base'
    id 'eclipse'
    id 'idea'
    id 'com.github.kt3k.coveralls' version '2.6.3'
    id 'org.sonarqube' version '2.0.1'
}

group 'io.github.runtimemodels'

version '7.0'

subprojects {
    apply plugin: 'java'
    apply plugin: 'maven-publish'
    apply plugin: 'jacoco'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'com.jfrog.bintray'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    group rootProject.group

    version "${rootProject.version}.${System.getenv('TRAVIS_COMMIT') ?: 'SNAPSHOT'}"

    repositories {
        jcenter()
    }

    dependencyManagement {
        dependencies {
            dependency 'javax:javaee-api:7.0'
            dependency 'org.jmockit:jmockit:1.25'
            dependency 'org.projectlombok:lombok:1.16.10'
        }

        imports {
            mavenBom 'io.spring.platform:platform-bom:2.0.6.RELEASE'
            mavenBom 'com.google.inject:guice-bom:4.0'
        }
    }

    jacocoTestReport {
        reports {
            xml {
                enabled true
            }
        }
    }

    task sourceJar(type: Jar) {
        classifier 'sources'
        from sourceSets.main.allJava
    }

    artifacts {
        archives sourceJar
    }

    publishing {
        publications {
            maven(MavenPublication) {
                from components.java
                artifact sourceJar
            }
        }
    }

    bintray {
        user = System.getenv('BINTRAY_USER')
        key = System.getenv('BINTRAY_KEY')
        publications = ['maven']
        pkg {
            repo = 'maven'
            name = 'chazm'
            userOrg = 'runtimemodels'
            desc = 'An organizational runtime model'
            websiteUrl = 'https://github.com/RuntimeModels/chazm'
            issueTrackerUrl = 'https://github.com/RuntimeModels/chazm/issues'
            vcsUrl = 'https://github.com/RuntimeModels/chazm.git'
            licenses = ['Apache-2.0']

            githubRepo = 'RuntimeModels/chazm'
            githubReleaseNotesFile = 'README.md'

            version {
                name = "${project.version}"
                released = new Date()
            }
        }
    }
}

task jacocoTestReport(type: JacocoReport) {
    dependsOn subprojects.jacocoTestReport
    jacocoClasspath = files(subprojects.configurations.jacocoAnt)
    sourceDirectories = files(subprojects.sourceSets.main.java.srcDirs)
    classDirectories = files(subprojects.sourceSets.main.output.classesDir)
    executionData = files(subprojects.jacocoTestReport.executionData).filter { it.exists() }
    reports {
        xml {
            enabled true
            destination "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
        }
    }
}

coveralls {
    sourceDirs = subprojects.sourceSets.main.java.srcDirs.flatten()
}

sonarqube {
    properties {
        property 'sonar.host.url', 'https://sonarqube.com'
        property 'sonar.projectKey', 'chazm'
        property 'sonar.projectName', 'Chazm: An Organizational Multiagent Runtime Model'
        property 'sonar.projectVersion', "${project.version}"
        property 'sonar.login', System.getenv('SONAR_TOKEN')
        if (System.getenv('TRAVIS_BRANCH') == 'master') {
            if (System.getenv('TRAVIS_PULL_REQUEST') == 'false') {
            } else {
                property 'sonar.analysis.mode', 'preview'
                property 'sonar.github.pullRequest', System.getenv('TRAVIS_PULL_REQUEST')
                property 'sonar.github.repository', System.getenv('TRAVIS_REPO_SLUG')
                property 'sonar.github.oauth', System.getenv('GITHUB_TOKEN')
            }
        } else {
            property 'sonar.analysis.mode', 'issues'
        }
    }
}

task printInfo << {
    println "  - project: ${project.name}"
    println "  - ${subprojects.size()} subprojects:"
    subprojects.each {
        println "    - ${it.name}:"
        println "      - archive artifacts: ${it.configurations.archives.allArtifacts.size()}"
        it.configurations.archives.artifacts.files.each {
            println "        - ${it.name}"
        }
        println "      - group: ${it.group}"
        println "      - version: ${it.version}"
    }
    println "  - group: ${project.group}"
    println "  - version: ${project.version}"
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.14.1'
    distributionUrl = "https://services.gradle.org/distributions/gradle-${gradleVersion}-all.zip"
}
